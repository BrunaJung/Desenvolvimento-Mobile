import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.lifecycle.Lifecycling.lifecycleEventObserver
import androidx.lifecycle.compose.LocalLifecycleOwner

//------------------------------------------

Aula09Theme {
                Surface() {
                    //Initial_Ui()
                    LoggerCicloVida()
                    Greeting("Maurício", Modifier)
                }
            }
            
//-------------------------------------------


@Composable
fun Initial_Ui() {
    val lifecycleOwner = LocalLifecycleOwner.current
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            when (event) { Lifecycle.Event.ON_START -> {
                    println("A activity está começando a ser visível")}
                Lifecycle.Event.ON_STOP -> {
                    println("A activity não está mais visível")}
                else -> {println("Outros eventos: $event")}
            }
        }
        val lifecycle = lifecycleOwner.lifecycle
        lifecycle.addObserver(observer)
        onDispose {lifecycle.removeObserver(observer)}
    }
}

@Composable
fun LoggerCicloVida() {
    val lifecycleOwner = LocalLifecycleOwner.current
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            when (event) {
                Lifecycle.Event.ON_CREATE -> Log.d("LoggerCicloVida", "onCreate chamado")
                Lifecycle.Event.ON_START -> Log.d("LoggerCicloVida", "onStart chamado")
                Lifecycle.Event.ON_RESUME -> Log.d("LoggerCicloVida", "onResume chamado")
                Lifecycle.Event.ON_PAUSE -> Log.d("LoggerCicloVida", "onPause chamado")
                Lifecycle.Event.ON_STOP -> Log.d("LoggerCicloVida", "onStop chamado")
                Lifecycle.Event.ON_DESTROY -> Log.d("LoggerCicloVida", "onDestroy chamado")
                else -> Log.d("LoggerCicloVida", "Outro evento: $event")
            }
        }
        val lifecycle = lifecycleOwner.lifecycle
        lifecycle.addObserver(observer)
        onDispose {  lifecycle.removeObserver(observer) }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Box(modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center) {
        Column(){
            Text(
                text = "Hello $name!",
                modifier = modifier
            )
            Text(
                text = "Acompanhe o Logcat!",
                modifier = modifier
            )
        }
    }
}


// Dependências do build.gradle (Módulo)
dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.runtime)
    implementation(libs.ui)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}